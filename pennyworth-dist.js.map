{"version":3,"sources":["pennyworth.js"],"names":[],"mappings":"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","file":"pennyworth-dist.js","sourcesContent":["/**\n * pennyworth.js\n * a natural language templating engine.\n * Licensed under GPL-3.0.\n * Copyright (C) 2015 Karim Alibhai.\n */\n\n'use strict';\n\nimport 'babel/polyfill';\nimport { flatten } from 'underscore';\nimport { LogisticRegressionClassifier } from 'natural';\n\nvar punc = ['.', ',', '!', '?'],\n    split = function*(text) {\n        var tmp;\n        for (var word of text.split(/\\s+/g)) {\n            tmp = yield word;\n\n            if (tmp) {\n                yield word;\n                yield tmp;\n            }\n        }\n    },\n    arrayOf = (size) => {\n        var tmp = [];\n        while (size --) tmp.push(null);\n        return tmp;\n    },\n    pennyworth = {\n        lex: (template) => {\n            var tokens = [],\n                tmp = '',\n                iterator = split(template);\n\n            for (var word of iterator) {\n                if (word[0] === '$') {\n                    // add the text so far\n                    if (tmp) {\n                        tokens.push({\n                            type: 'text',\n                            value: tmp.trim()\n                        });\n\n                        tmp = '';\n                    }\n\n                    // trim off variable symbol\n                    word = word.substr(1);\n\n                    // look for punctuation\n                    var m = word.match(new RegExp('[' + punc.join('') + ']', 'g'));\n                    if (m) {\n                        // grab matched punctuation\n                        m = m[0];\n\n                        // trim till there\n                        var _tmp = word.substr(word.indexOf(m));\n                        word = word.substr(0, word.indexOf(m));\n\n                        // ask iterator for a redo\n                        iterator.next(_tmp);\n                    }\n\n                    // split by name and filter\n                    word = word.split(':');\n\n                    // push to token list\n                    tokens.push({\n                        type: 'variable',\n\n                        // name always comes first\n                        value: word[0],\n\n                        // default filter is string\n                        filter: word[1] || 'string'\n                    });\n                } else if (word[0] === '[') {\n                    // add the text so far\n                    if (tmp) {\n                        tokens.push({\n                            type: 'text',\n                            value: tmp.trim()\n                        });\n\n                        tmp = '';\n                    }\n\n                    // directive name\n                    word = word.substr(1);\n\n                    // see if more than just brackets\n                    if (word.indexOf(']') !== -1) {\n                        iterator.next(word.substr(1 + word.indexOf(']')));\n                        word = word.substr(0, word.indexOf(']'));\n                    }\n\n                    if (word[word.length - 1] !== ']') {\n                      // create arguments list\n                      var args = [],\n                          _tmp,\n                          text = '';\n\n                        do {\n                            _tmp = iterator.next().value;\n                            if (!_tmp) break;\n\n                            if (_tmp.indexOf(']') === -1) {\n                                text += _tmp + ' ';\n                            } else {\n                                text += _tmp.substr(0, _tmp.indexOf(']'));\n\n                                if (_tmp.substr(1 + _tmp.indexOf(']'))) {\n                                  iterator.next(_tmp.substr(1 + _tmp.indexOf(']')));\n                                }\n                            }\n                        } while (_tmp.indexOf(']') === -1);\n\n                        args = text.split(',').map((arg) => arg.trim());\n                    } else word = word.substr(0, word.length - 1);\n\n                    // add to list\n                    tokens.push({\n                        type: 'directive',\n                        value: word,\n                        args: args\n                    });\n                } else if (punc.indexOf(word) !== -1) {\n                    // add the text so far\n                    if (tmp) {\n                        tokens.push({\n                            type: 'text',\n                            value: tmp.trim()\n                        });\n\n                        tmp = '';\n                    }\n\n                    tokens.push({\n                        type: 'punctuation',\n                        value: word\n                    });\n                } else {\n                    if (word.match(/[\\.,!\\?]/g)) {\n                        var c = '';\n\n                        for (var i = 0; i < word.length; i += 1) {\n                            if (punc.indexOf(word[i]) === -1) {\n                                c += word[i];\n                            } else {\n                                if (c) {\n                                    tokens.push({\n                                        type: 'text',\n                                        value: [tmp.trim(), c.trim()].join(' ').trim()\n                                    });\n\n                                    c = '';\n                                }\n\n                                tokens.push({\n                                    type: 'punctuation',\n                                    value: word[i]\n                                });\n                            }\n                        }\n                    } else {\n                        tmp += word + ' ';\n                    }\n                }\n            }\n\n            return tokens;\n        },\n\n        parse: (lex) => {\n            var tmp;\n\n            for (var i = 0; i < lex.length; i += 1) {\n                if (lex[i].type === 'directive') {\n                    tmp = pennyworth.directive(lex[i].value, lex[i].args);\n                    return arrayOf(tmp.length).map((nil, index) =>\n                        pennyworth.parse(lex.slice(0, i).concat(tmp[index], lex.slice(i + 1)))\n                    );\n                }\n            }\n\n            return [lex];\n        },\n\n        flatten: (lex) => {\n            return lex.map((_lex) =>\n                flatten(_lex)\n                    .filter((token) => token.type === 'text')\n                    .map((token) => token.value)\n                    .join(' ')\n                    .trim()\n            );\n        },\n\n        _directives: {\n            '...': (args) => args.map((text) => {\n                return {\n                    type: 'text',\n                    value: text\n                };\n             })\n        },\n\n        directive: (name, options) => {\n            if (typeof options === 'function') pennyworth._directives[name] = options;\n            else return (pennyworth._directives[name] || ((arg) => arg)).call(null, options);\n        },\n\n        _filters: {\n            'string': (text) => String(text),\n            'int': (text) => parseInt(text, 10),\n            'float': (text) => parseFloat(text)\n        },\n\n        filter: (name, options) => {\n            if (typeof options === 'function') pennyworth._filters[name] = options;\n            else return (pennyworth._filters[name] || ((arg) => arg)).call(null, options);\n        },\n\n        template: (text) => {\n            // remove apostrophes to stop clog\n            text = text.split('\\'').join('');\n\n            var tpl = pennyworth\n                        .parse(pennyworth.lex(text))\n                        .map((array) => flatten(array)),\n                classifier = new LogisticRegressionClassifier();\n\n            if (tpl.length !== 0) {\n                // load the classifier\n                pennyworth\n                    .flatten(tpl)\n\n                    // add each flattened command as a document\n                    .forEach((text, index) => classifier.addDocument(text, String(index)));\n\n                // train the classifier\n                classifier.train();\n            } else {\n                classifier = {\n                    classify () {\n                        return '0';\n                    }\n                };\n            }\n\n            return (data) => {\n                // clean up apostrophes for input as well\n                data = data.split('\\'').join('');\n\n                // get appropriate text\n                var index = parseInt(classifier.classify(data), 10);\n\n                // grab appropriate lex\n                var lex = tpl[index]\n                            .filter((token) => token.type !== 'punctuation');\n\n                // create a scope to store data\n                var scope = {};\n\n                // parse out variables\n                for (var i = 0; i < lex.length; i += 1) {\n                    if (lex[i].type === 'variable') {\n                        // grab previous index\n                        var prev;\n                        if (i === 0) prev = 0;\n                        else prev = data.indexOf(lex[i - 1].value) + lex[i - 1].value.length;\n\n                        // grab next index\n                        var next;\n                        if (i === (lex.length - 1)) next = data.length;\n                        else next = data.indexOf(lex[i + 1].value, prev) - prev;\n\n                        // grab data\n                        scope[lex[i].value] =\n                            data\n                                .substr(prev, next)\n                                .replace(new RegExp('[' + punc.join('') + ']', 'g'), '')\n                                .trim();\n\n                        // apply the filter\n                        scope[lex[i].value] = pennyworth.filter(lex[i].filter, scope[lex[i].value]);\n\n                        // clean up data\n                        data = data.substr(prev + next);\n                    }\n                }\n\n                // return our created scope\n                return scope;\n            };\n        }\n    };\n\n// export\nexport default pennyworth;\n"],"sourceRoot":"/source/"}